jobs:
  coq:
    needs:
    - rocq-core
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"coq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rocq-core'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
  coq-elpi:
    needs:
    - rocq-core
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq-elpi)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"coq-elpi\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rocq-core'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq-elpi"
  hierarchy-builder:
    needs:
    - rocq-core
    - coq-elpi
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (hierarchy-builder)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"hierarchy-builder\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rocq-core'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq-elpi'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq-elpi"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
  mathcomp:
    needs:
    - coq
    - mathcomp-character
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"mathcomp\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-character'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-character"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp"
  mathcomp-algebra:
    needs:
    - coq
    - hierarchy-builder
    - micromega-plugin
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-algebra)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"mathcomp-algebra\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-order'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-order"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-fingroup'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-fingroup"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: micromega-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "micromega-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-algebra"
  mathcomp-character:
    needs:
    - coq
    - mathcomp-field
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-character)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"mathcomp-character\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-field'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-field"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-character"
  mathcomp-field:
    needs:
    - coq
    - mathcomp-solvable
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-field)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"mathcomp-field\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-solvable'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-solvable"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-field"
  mathcomp-solvable:
    needs:
    - coq
    - mathcomp-algebra
    - hierarchy-builder
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (mathcomp-solvable)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"mathcomp-solvable\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "coq"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: mathcomp-algebra'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-algebra"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: hierarchy-builder'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "hierarchy-builder"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "mathcomp-solvable"
  micromega-plugin:
    needs:
    - rocq-core
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (micromega-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"micromega-plugin\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error:
        getting derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rocq-core'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "micromega-plugin"
  rocq-core:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rocq-core)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"rocq-core\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
  rocq-elpi:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (rocq-elpi)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"rocq-elpi\" \\\n   --dry-run 2> err > out ||
        (touch fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting
        derivation failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-elpi"
  stdlib:
    needs:
    - rocq-core
    - micromega-plugin
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v31
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup coq
      uses: cachix/cachix-action@v16
      with:
        extraPullNames: coq-community, math-comp
        name: coq
    - id: stepGetDerivation
      name: Getting derivation for current job (stdlib)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"rocq-master\" --argstr job \"stdlib\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\ncat out err\nif [ -e fail ]; then echo \"Error: getting derivation
        failed\"; exit 1; fi\n"
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: "if $(cat out err | grep -q \"built:\") ; then\n  echo \"CI target needs
        actual building\"\n  if $(cat out err | grep -q \"derivations will be built:\"\
        ) ; then\n    echo \"waiting a bit for derivations that should be in cache\"\
        \n    sleep 30\n  fi\nelse\n  echo \"CI target already built\"\n  echo \"\
        status=fetched\" >> $GITHUB_OUTPUT\nfi\n"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: rocq-core'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "rocq-core"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: 'Building/fetching previous CI target: micromega-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "micromega-plugin"
    - if: steps.stepCheck.outputs.status != 'fetched'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle 
        "rocq-master" --argstr job "stdlib"
name: Nix CI for bundle rocq-master
on:
  pull_request:
    paths:
    - .github/workflows/nix-action-rocq-master.yml
  pull_request_target:
    paths-ignore:
    - .github/workflows/nix-action-rocq-master.yml
    types:
    - opened
    - synchronize
    - reopened
  push:
    branches:
    - master
